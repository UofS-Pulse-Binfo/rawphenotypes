<?php

/**
 * @file
 * Contains all schema api and hook_install()/hook_uninstall()
 * implementations required by this module.
 */
 
/**
 * Implements hook_schema().
 */
function rawpheno_schema() {
  // PHENO PLANT
  // Since the plant can be described in many different ways,
  // we are using a prop-like table to describe the plant.
  // This allows for the flexibility needed to describe both
  // greenhouse and field pots.
  $schema['pheno_plant'] = array(
    'description' => t('Table for phenotype plant.'),
    'fields' => array(
      'plant_id' => array(
        'description' => t('A unique ID for each row'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => t('A unique ID for a stock name.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),
      ),
  );

  // PHENO PLANT PROP
  // Type shoud include entry, plot, rep and location.
  $schema['pheno_plantprop'] = array(
    'description' => t('Table for phenotype plantprop.'),
    'fields' => array(
      'plantprop_id' => array(
        'description' => t('Primary key: A unique ID for each plantprop record.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'plant_id' => array(
        'description' => t('Holds plant ID number.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' =>  TRUE,
      ),
      'type_id' => array(
        'description' => t('Term ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'value' => array(
        'description' => t('The value of the trait measured.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ,)
    ,),
    'primary key' => array('plantprop_id'),
    'foreign keys' => array(
      'pheno_plant' => array(
        'table' => 'pheno_plant',
        'columns' => array('plant_id' => 'plant_id')),),
  );
  
  // PHENO SCALE MEMBER
  // Modified is the timestamp that it was last modified. 
  // This allows us to determine when values were updated.
  $schema['pheno_scale_member'] = array(
    'description' => t('Table for pheno scale member.'),
    'fields' => array(
      'member_id' => array(
        'description' => t('Primary key: A unique ID for each scale value.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'scale_id' => array(
        'description' => t('Scale ID number of a scale value.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'code' => array(
        'description' => t('Corresponding code for each scale ID.'),
        'type' => 'varchar',
        'length' => 255,
      ),
      'value' => array(
        'description' => t('Description of a scale value.'),
        'type' => 'text',
        'not null' => TRUE
      ,)
    ,),
    'primary key' => array('member_id'),
  );
    
  // PHENO MEASUREMENTS
  // The scale code is what is written in the spreadsheet, 
  // whereas the value is what it actually represents.
  $schema['pheno_measurements'] = array(
    'description' => t('Table for phenotype measurements'),
    'fields' => array(
      'measurement_id' => array(
        'description' => t('Primary key: A unique ID for each trait measured.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'plant_id' => array(
        'description' => t('Holds plant ID number.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type_id' => array(
        'description' => t('Term ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'unit_id' => array(
        'description' => t('Unit ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => t('The value of the trait measured.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'cvalue_id' => array(
        'description' => t('Scale member code number when unit is scale.'),
        'type' => 'varchar',
        'length' => 10,
        'not null' => FALSE,
      ),
      'modified' => array(
        'description' => t('timestamp of the last modification.'),
        'type' => 'varchar',
        'length' => 30,
        'not null' => TRUE,
      )
    ,),
    'primary key' => array('measurement_id'),
    'foreign keys' => array(
      'pheno_plant' => array(
        'table' => 'pheno_plant',
        'columns' => array('plant_id' => 'plant_id')),),
  );
  //
  
  // PROJECT-CVTERM
  // Group a set of traits/cvterm to a project.
  $schema['pheno_project_cvterm'] = array(
    'description' => t('Table for grouping set of traits to a project.'),
    'fields' => array(
      'project_cvterm_id' => array(
        'description' => t('Primary key: A unique ID number.)'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of a project from chado.project table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'cvterm_id' => array(
        'description' => t('cvterm id number of a trait'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      // This option will allow for grouping of traits. In AGILE Project, types include:
      // Essential Traits, Optional Traits, Subset Trait and Plant Property.
      // Use this field to indicate as such.
      // A function in rawpheno.function.measurements lists possible types that can be made available
      // to admin when adding traits in the admin control panel.
      'type' => array(
        'description' => t('Indicate a column header is essential, not essential (optional), a plant property and other'),
        'type' => 'varchar',
        'length' => 20,
      ),
    ),
    'primary key' => array('project_cvterm_id'),
  );
  
  // PROJECT-PLANT/STOCK
  $schema['pheno_plant_project'] = array(
    'description' => t('Table for mapping stock to a project'),
    'fields' => array(
      'plant_project_id' => array(
        'description' => t('Primary key: A nunique ID number.'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of a project from chado.project table.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'plant_id' => array(
        'description' => t('ID number of stock from pheno_plant table.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('plant_project_id'),
  );
  
  // PROJECT-USER
  $schema['pheno_project_user'] = array(
    'description' => t('This table will hold information about user and project that'),
    'fields' => array(
      'project_user_id' => array(
        'description' => t('Primary Key: A unique ID number'),
        'type' => 'serial',
        'not noll' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of project from chado.project table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('ID number of logged in user from user table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('project_user_id'),
  );
   
  // PROJECT-BACKUP-FILE
  $schema['pheno_backup_file'] = array(
    'description' => t('This table will hold information about files uploaded by user to a project'),
    'fields' => array(
      'file_id' => array(
        'description' => t('Primary Key: A unique ID number'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_user_id' => array(
        'description' => t('The project ID number from table pheno_project_user'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => t('File ID number from file_managed table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'version' => array(
        'description' => t('The sequence number of the file in relation to a project'),
        'type' => 'int',
      ),
      'validation_result' => array(
        'description' => t('Stores the result of file validation performed'),
        'type' => 'text',
      ),
      'notes' => array(
        'description' => t('Notes, description and comments made to a file'),
        'type' => 'text',
      ),
      'archive' => array(
        'description' => t('Indicates whether a file is temporarily removed from a project.'),
        'type' => 'varchar',
        'length' => 2,
        'default' => 'n',
      ),
    ),
    'primary key' => array('file_id'),
  );
    
  return $schema;
}

// Include function to manage column headers, cv terms and variable names.
module_load_include('inc', 'rawpheno', 'include/rawpheno.function.measurements');

/**
 * Function to manage terms used by this module.
 *
 * @return 
 *   An array of string representing scale measurements, variable names,
 *   controlled vocabulary and measurement units.
 */
function rawpheno_function_terms($type) {
  switch($type) {
    case 'project':
      return 'AGILE: Application of Genomic Innovation in the Lentil Economy';
      break;
    
    case 'defaults':
      // Default colour scheme and heading/title.
      return array('colour' => '#304356',
                   'rawdata' => 'Phenotypic data available through KnowPulse',
                   'download' => 'Select locations and traits that you want to download',
                   'instructions' => 'Standard Phenotyping Procedure',
                   'upload' => 'Drag and Drop phenotypic data collection spreadsheet',
                   'backup' => 'My files',
                   'r-words' => 'of,to,have,on,at',
                   'r-chars' => '(,),/,-,:,;,%',
                   'r-replace' => '# = num,/ = div,? = unsure,- = to',);
      break;
      
    case 'scales':
      // Scale equivalent for scale units.
      return array(
        'Lodging (Scale: 1-5) upright - lodged' => array(
          1 => 'Vertical/upright', 
          2 => 'Leaning',
          3 => 'Most plants at 45 degrees angle',
          4 => 'All plants 10-45 degrees from ground',
          5 => 'Most plants flat/prostrate',
        )
      );
      break;
    
    case 'variables':
      // Configuration variable names.
      return array('rawpheno_colour_scheme', 
                   'rawpheno_rawdata_title',
                   'rawpheno_download_title', 
                   'rawpheno_instructions_title', 
                   'rawpheno_upload_title',
                   'rawpheno_backup_title',
                   'rawpheno_rtransform_words',
                   'rawpheno_rtransform_characters',
                   'rawpheno_rtransform_replace',);
      break;
    
    case 'vocabularies':
      // Controlled vocabularies.
      return array('phenotype_plant_property_types', 
                   'phenotype_measurement_types', 
                   'phenotype_measurement_units',);
      break;
    
    case 'units':
      // Units available in the spreadsheet.
      return array('date' => 'Date',
                   'count' => 'Count',
                   'days' => 'Days',
                   'cm' => 'Centimeters',
                   'y/n/?' => 'Yes, No or ? - Not sure',
                   'scale' => 'Scale: 1-5',
                   'g' => 'Grams (g)',
                   'text' => 'Alphanumeric',);
      break;
  }
}

/**
 * Implements hook_install().
 */
function rawpheno_install() {
  // Create a cv term for R Friendly version of a column header.
  $cv_obj = tripal_insert_cv('r_compatible_column_header', 'R Compatible Column Headers');

  // Set the project to AGILE (default).
  $prj_id = db_query("SELECT project_id FROM chado.project WHERE name = :project_name LIMIT 1",
  array(':project_name' => rawpheno_function_terms('project')));
        
  if ($prj_id->rowCount()) {  
    $project_ID = $prj_id->fetchField();
  }
  
  // Get variable names.
  $trait_type = rawpheno_function_trait_types();
  $vars = rawpheno_function_terms('variables');
  $config = rawpheno_function_terms('defaults');
  
  // Initialize default R transformation rules.
  variable_set($vars[6], $config['r-words']);  
  variable_set($vars[7], $config['r-chars']);  
  variable_set($vars[8], $config['r-replace']);  
  
  // Create cvterm entry for each traits.
  // Array to hold array of cvterms.
  $pp_terms = array();
  $mt_terms = array();
  
  // Get essential traits.
  $essential_header = rawpheno_function_headers('essential');  
  
  // Get the required trait set, in this case all column headers
  // with the exception of Name.
  $expected_header = rawpheno_function_headers('expected');  
  
  // Index number of Plot, Entry, Rep and Location in traits array.
  // This id array is inserted into {chado.cvterm} as property types.
  $pp_id = array(0, 1, 3, 4);
  
  // Read each header and create cvterm name and cvterm definition.
  foreach($expected_header as $i => $term) {
    // Skip column header if it is Name.
    if ($term == 'Name') { 
      continue;
    }
    
    // Determine type of terms and create an array of
    // cvterm name => cvterm definition values.
    if (in_array($i, $pp_id)) {
      // Term is Plot, Entry, Rep and Location.
      // Term is property type.
      $pp_terms[$term] = $term;      
    }
    else {
      // The rest of the terms.
      // Term is measurement type.
      $mt_terms[$term] = $term;
    }
  }
  
  // Measurement unit terms array.
  $mu_terms = rawpheno_function_terms('units');
                    
  // Vocabulary terms array.
  $cv_vocabulary = rawpheno_function_terms('vocabularies');
  
  // Insert 0. plant property, 1. measurment type and 2. measurement unit.
  $arr_terms = array($pp_terms, $mt_terms, $mu_terms);
  // Insert all terms by cvterm vocabulary.
  foreach($cv_vocabulary as $cv_i => $cv_name) {
    // Insert Controlled Vocubalary
    tripal_insert_cv($cv_name, str_replace('_', ' ', ucfirst($cv_name)));
    
    // Read each cvterm name and cvterm definition and insert to {chado.cvterm}.
    foreach($arr_terms[$cv_i] as $term_name => $term_def) {
      $arr_terms_param = array('id' => 'tripal:'.$term_name,
                               'name' => $term_name,
                               'definition' => $term_def,
                               'cv_name' => $cv_name);
                               
      // Insert cv term.                         
      $cvterm_obj = tripal_insert_cvterm($arr_terms_param);  
      
      // When inserting a cvterm of type phenotypes_measurement_types,
      // insert an R Friendly version of the termm into cvtermprop and map
      // the term to AGILE project only when AGILE is present in projects table.
      // cvterm measurement types and cvterms plant property.
      if ($cv_i == 0 OR $cv_i == 1) {
        // Map cvterm to a project.
        // R Compatible cvterm.
        $r_compatible = rawpheno_function_make_r_compatible($term_name);
        
        // Insert the same trait (r compatible) to cvterm prop.
        db_insert('chado.cvtermprop')
          ->fields(array('cvterm_id' => $cvterm_obj->cvterm_id, 
            'type_id' => $cv_obj->cv_id,
            'value' => $r_compatible,
            'rank' => 0))
          ->execute();
         
        // Map traits to AGILE only when AGILE exists. 
        // R Friendly version is generated even when AGILE project is not
        // present since traits will be available in add column header panel.
        if (isset($project_ID)) {        
          // Determine if trait is essential, optional or plant property.
          if($cv_i == 0) {
            $type = $trait_type['type4']; // plantproperty
          }
          else {
            // Trait is either essential or optional.
            $type = (in_array($term_def, $essential_header)) ? $trait_type['type1'] : $trait_type['type2'];
          }
          
          // Assign a project to this cvterm.
          // Name column header is part of the column headers or a project.
          db_insert('pheno_project_cvterm')
            ->fields(array(
              'project_id' => $project_ID,
              'cvterm_id' => $cvterm_obj->cvterm_id,
              'type' => $type)
            )
            ->execute();
        }  
      }
    }
  }
  
  // From standard phenotype data collection, scale is 1 - 5.
  $scales = rawpheno_function_terms('scales');
  
  // Insert scale values 1 - 5       
  foreach ($scales as $measurement_name => $scale) {
    $measurement = tripal_get_cvterm(array('name' => $measurement_name, 'cv_id' => array('name' => 'phenotype_measurement_types')));
    if ($measurement) {
      $measurement_id = $measurement->cvterm_id;;
      foreach($scale as $code => $value) {
        $tmp = db_insert('pheno_scale_member')
          ->fields(array(
            'scale_id' => $measurement_id, 
            'code' => $code, 
            'value' => $value
          ))
          ->execute();
      }
    }
  }
  
  // Create materialized view used in phenotypes/rawdata.
  // Using Tripal: tripal_add_mview().
  $mv_name = 'rawpheno_rawdata_summary';
  $mv_module = 'rawpheno';
  $mv_comment = 'Materialized view used by rawpheno module to generate summary of traits per location, rep and year.';

  // Create a summary of data in the following format:
  // Plant id, Location, Rep, Planting Date and Total traits count.
  // NOTE: trait count includes planting date. 
  $mv_sql = "SELECT CAST(t1.plant_id AS numeric) AS plant_id, 
      t2.value AS location, 
      t3.value AS rep, 
      t5.value AS planting_year,
      COUNT(DISTINCT t4.type_id) AS total_count,
      ARRAY_TO_STRING(ARRAY_AGG(DISTINCT t4.type_id), ',') AS all_traits
    FROM pheno_plant AS t1
      INNER JOIN {pheno_plantprop} AS t2 USING(plant_id)
      INNER JOIN {pheno_plantprop} AS t3 USING(plant_id)
      INNER JOIN {pheno_measurements} AS t4 USING(plant_id)
      INNER JOIN {pheno_measurements} AS t5 USING(plant_id)
    WHERE
      t2.type_id = (SELECT cvterm_id FROM chado.cvterm WHERE name = 'Location' LIMIT 1) AND 
      t3.type_id = (SELECT cvterm_id FROM chado.cvterm WHERE name = 'Rep' LIMIT 1) AND
      t5.type_id = (SELECT cvterm_id FROM chado.cvterm WHERE name = 'Planting Date (date)' LIMIT 1)
    GROUP BY t1.plant_id, t4.plant_id, t2.value, t3.value, t5.value";
  
  // Schema array.
  $mv_schema = array (
    'table' => 'rawpheno_rawdata_mview',
    'fields' => array (
    'plant_id' => array (
      'type' => 'int'),
    'location' => array (
      'type' => 'varchar',
      'length' => 255),
    'rep' => array (
      'type' => 'varchar',
      'length' => 255),
    'planting_date' => array (
      'type' => 'varchar',
      'length' => 255),
    'total_count' => array (
      'type' => 'int'),
    'all_traits' => array(
      'type' => 'text'),  
    )
  );
  
  // Create materialized view.
  tripal_add_mview($mv_name, $mv_module, $mv_schema, $mv_sql, $mv_comment);
  
  // Set default colour scheme and page titles.
  variable_set($vars[0], $config['colour']);
  variable_set($vars[1], $config['rawdata']);
  variable_set($vars[2], $config['download']);
  variable_set($vars[3], $config['instructions']);
  variable_set($vars[4], $config['upload']);
  variable_set($vars[5], $config['backup']);
    
  // Add data collection spreadsheet to public:// directory, 
  // and link this file for download in instructions page.
  $destination = file_default_scheme() . '://';
  if (file_prepare_directory($destination, FILE_MODIFY_PERMISSIONS)) {
    // Add this file if directory is writable.
    // File is in zip format as it is more friendly for download than xlsx.
    $file = 'AGILE-PhenotypeDataCollection-v5.xlsx.zip';
    $source = drupal_get_path('module', 'rawpheno') . '/theme/' . $file;
    // Copy file without creating an entry in drupal database.
    // If file is present, replace it with the same file.
    file_unmanaged_copy($source, $destination, FILE_EXISTS_REPLACE);
  }   
}

/**
 * Implements hook_uninstall().
 */
function rawpheno_uninstall() { 
  // When module is uninstalled, perform the following:
  // 1. Delete persistent variables used by module configuration.
  // 2. Remove materialized view.
  // 3. Delete cvterms records.
  
  // 1.
  // Delete persistent variables.
  $vars = rawpheno_function_terms('variables');
  foreach($vars as $var) {
    if (variable_get($var)) {
      variable_del($var);
    }
  }
  
  // 2.
  // Remove materialized view.
  // Using tripal: tripal_delete_mview().
  // Get mview id of materilaized view created by hook_install().
  $sql = "SELECT mview_id FROM {tripal_mviews} WHERE mv_table = :mv_table LIMIT 1";
  $mview_id = db_query($sql, array(':mv_table' => 'rawpheno_rawdata_mview'))
    ->fetchField();
              
  if (isset($mview_id) && $mview_id > 0) {
    // Delete materialized view.
    tripal_delete_mview($mview_id);
  }
  
  // 3.
  // Remove cvterm records then controlled vocabulary.
  $cv_vocabulary = rawpheno_function_terms('vocabularies');
  
  foreach($cv_vocabulary as $vocabulary) {
    // Delete all cvterm under a controlled vocabulary.
    $cv_id = tripal_get_cv(array('name' => $vocabulary));
    if (isset($cv_id->cv_id)) {
      // Delete all the cvterm under this vocabulary.
      $del = "DELETE FROM chado.cvterm WHERE cv_id = :cv_id";
      db_query($del, array(':cv_id' => $cv_id->cv_id));
      
      // Then delete controlled vocabulary terms.
      $del = "DELETE FROM chado.cv WHERE cv_id = :cv_id AND name = :cv";
      db_query($del, array(':cv_id' => $cv_id->cv_id, ':cv' => $vocabulary));
    }
  }
  
  // 4. Remove cvterm prop entries.
  $sql = "SELECT cv_id FROM chado.cv WHERE name = :cv_name LIMIT 1";
  $cv_id = db_query($sql, array(':cv_name' => 'r_compatible_column_headers'))
    ->fetchField();
  
  if (isset($cv_id->cv_id)) {  
    // Then delete cvterm properties.
    $del = "DELETE FROM chado.cvtermprop WHERE type_id = :cv_id";
    db_query($del, array(':cv_id' => $cv_id->cv_id));
  }
}

/**
 * Implements hook_update_N().
 * Update custom table with tables relating a project to set of cvterms
 * and project to stock/name.
 *
 * N 
 * 7  - Drupal core compatibility.
 * 0  - Module's major release version.
 * 02 - Sequence count.
 */
function rawpheno_update_7002() {
  // Table definition as per definition in hook_schema() above.
  // PROJECT-CVTERM
  // Group a set of traits/cvterm to a project.
  $schema['pheno_project_cvterm'] = array(
    'description' => t('Table for grouping set of traits to a project.'),
    'fields' => array(
      'project_cvterm_id' => array(
        'description' => t('Primary key: A unique ID number.)'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of a project from chado.project table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'cvterm_id' => array(
        'description' => t('cvterm id number of a trait'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      // This option will allow for grouping of traits. In for AGILE Project, types include:
      // Essential Traits, Optional Traits, Subset Trait and Plant Property.
      // Use this field to indicate as such.
      // A function in rawpheno.function.measurements lists possible types that can be made available
      // to admin when adding traits in the admin control panel.
      'type' => array(
        'description' => t('Indicate a column header is essential, not essential (optional), a plant property and other'),
        'type' => 'varchar',
        'length' => 20,
      ),
    ),
    'primary key' => array('project_cvterm_id'),
  );
  
  db_create_table('pheno_project_cvterm', $schema['pheno_project_cvterm']);
  
  // PROJECT-PLANT/STOCK
  $schema['pheno_plant_project'] = array(
    'description' => t('Table for mapping stock to a project'),
    'fields' => array(
      'plant_project_id' => array(
        'description' => t('Primary key: A nunique ID number.'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of a project from chado.project table.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'plant_id' => array(
        'description' => t('ID number of stock from pheno_plant table.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('plant_project_id'),
  );
  
  db_create_table('pheno_plant_project', $schema['pheno_plant_project']);

  // PROJECT-USER
  $schema['pheno_project_user'] = array(
    'description' => t('This table will hold information about user and project that'),
    'fields' => array(
      'project_user_id' => array(
        'description' => t('Primary Key: A unique ID number'),
        'type' => 'serial',
        'not noll' => TRUE,
      ),
      'project_id' => array(
        'description' => t('ID number of project from chado.project table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('ID number of logged in user from user table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('project_user_id'),
  );
   
  db_create_table('pheno_project_user', $schema['pheno_project_user']);
   
  // PROJECT-BACKUP-FILE
  $schema['pheno_backup_file'] = array(
    'description' => t('This table will hold information about files uploaded by user to a project'),
    'fields' => array(
      'file_id' => array(
        'description' => t('Primary Key: A unique ID number'),
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project_user_id' => array(
        'description' => t('The project ID number from table pheno_project_user'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => t('File ID number from file_managed table'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'version' => array(
        'description' => t('The sequence number of the file in relation to a project'),
        'type' => 'int',
      ),
      'validation_result' => array(
        'description' => t('Stores the result of file validation performed'),
        'type' => 'text',
      ),
      'notes' => array(
        'description' => t('Notes, description and comments made to a file'),
        'type' => 'text',
      ),
      'archive' => array(
        'description' => t('Indicates whether a file is temporarily removed from a project.'),
        'type' => 'varchar',
        'length' => 2,
        'default' => 'n',
      ),
    ),
    'primary key' => array('file_id'),
  );
  
  db_create_table('pheno_backup_file', $schema['pheno_backup_file']);  
}