<?php

/**
 * @file
 * Contains all schema api implementations required by this module.
 */

//Include function to manage list of traits/measurements.
module_load_include('inc', 'rawpheno', 'include/rawpheno_function_measurements');
 
/**
 * Implements hook_schema().
 */ 
function rawpheno_schema() {
  //PHENO PLANT
  //since the plant can be described in many different ways, we
  //are using a prop-like table to describe the plant. this allows
  //for the flexibility needed to describe both greenhouse and field pots.
  $schema['pheno_plant'] = array(
    'description' => 'table for phenotype plant',
    'fields' => array(
      'plant_id' => array(
        'description' => 'plant id field',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,),
      
      'stock_id' => array(
        'description' => 'stock id field',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),), 
  );
  //
  
  //PHENO PLANT PROP
  //type shoud include entry, plot, rep and location
  $schema['pheno_plantprop'] = array(
    'description' => 'table for phenotype plantprop',
    'fields' => array(
      'plantprop_id' => array(
        'description' => 'primary key of phenotype plant prop',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE),
        
      'plant_id' => array(
        'description' => 'holds {pheno_plant.plant_id}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' =>  TRUE,),
        
      'type_id' => array(
        'description' => 'type id field',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
        
      'value' => array(
        'description' => 'value field',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,),),
        
    'primary key' => array('plantprop_id'),
    //
    'foreign keys' => array('pheno_plant' => array(
      'table' => 'pheno_plant',
      'columns' => array('plant_id' => 'plant_id')),),
  );
  //
  
  //PHENO SCALE MEMBER
  //modified is the timestamp that it was last modified. this
  //allows us to determine when values were updated
  $schema['pheno_scale_member'] = array(
    'description' => 'table for pheno scale member',
    'fields' => array(
      'member_id' => array(
        'description' => 'primary key of scale member',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,),
      
      'scale_id' => array(
        'description' => 'scale id field',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),
      
      'code' => array(
        'description' => 'code used in {pheno_measurements}',
        'type' => 'varchar',
        'length' => 255,),
      
      'value' => array(
        'description' => 'text description of code',
        'type' => 'text',
        'not null' => TRUE,),),
    'primary key' => array('member_id'),
  );
  //
    
  //PHENO MEASUREMENTS
  //the scale code is what is written in the spreadsheet whereas
  //the value is what is actually represents.
  $schema['pheno_measurements'] = array(
    'description' => 'table for phenotype measurements',
    'fields' => array(
      'measurement_id' => array(
        'description' => 'primary key of phenotype measurements',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,),
        
      'plant_id' => array(
        'description' => 'holds {pheno_plant.plant_id}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),
        
      'type_id' => array(
        'description' => 'type id field',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE),
        
      'unit_id' => array(
        'description' => 'unit id field',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),
        
      'value' => array(
        'description' => 'value field',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,),
        
      'cvalue_id' => array(
        'description' => 'c value id field',
        'type' => 'char',
        'length' => 10,
        'not null' => FALSE,),
        
      'modified' => array(
        'description' => 'timestamp of last modification',
        'type' => 'varchar',
        'length' => 30,
        'not null' => TRUE),),
    'primary key' => array('measurement_id'),
    //
    'foreign keys' => array('pheno_plant' => array(
      'table' => 'pheno_plant',
      'columns' => array('plant_id' => 'plant_id')),),
  );
  //
    
  return $schema;
}

/**
 * Implements hook_install().
 * Insert these records after tables are created
 */
function rawpheno_install() {
  //Array to hold array of cvterms.
  $pp_terms = array();
  $mt_terms = array();

  //Get all measurements/traits.
  $arr_traits = rawpheno_function_headers('expected');  
  //Index number of Plot, Entry, Rep and Location in measurement/traits array.
  $pp_id = array(0,1,3,4);
  
  //Create cvterm name and cvterm definition array.
  foreach($arr_traits as $i => $term) {
    $tmp_term = $term;
    //Remove unit from the term and convert to lower case
    $t = trim(strtolower(preg_replace('/\([^)]+\)/', '', $tmp_term)));

    //Skip if Name trait.
    if ($term == 'name') { 
      continue;
    }
    
    //Determine type of terms.
    if (in_array($i, $pp_id)) {
      //Term is Plot, Entry, Rep and Location
      $pp_terms[$t] = $term;      
    }
    else {
      //Term is measurement type.
      $mt_terms[$t] = $term;
    }
  }
  
  //Measurement unit terms array.
  $mu_terms = array('date' => 'Date',
                    'count' => 'Count',
                    'days' => 'Days',
                    'cm' => 'Centimeters',
                    'y/n/?' => 'Yes, No or ? - Not sure',
                    'scale' => 'Scale: 1-5',
                    'g' => 'Grams (g)',
                    'text' => 'Alphanumeric');
                    
  //Vocabulary terms array.
  $cv_vocabulary = array('phenotype_plant_property_types', 
                         'phenotype_measurement_types', 
                         'phenotype_measurement_units');
                         
  //Insert all data array.
  foreach($cv_vocabulary as $cv_i => $cv_name) {
    $arr_terms = array();
    
    //Insert 1. plant property, 2. measurment type and 3. measurement unit.
    if ($cv_i == 0) 
      $arr_terms = $pp_terms;
    elseif ($cv_i == 1)
      $arr_terms = $mt_terms;
    elseif ($cv_i == 2)
      $arr_terms = $mu_terms;  
  
    foreach($arr_terms as $term_name => $term_def) {
      $arr_terms_param = array('id'         => 'tripal:'.$term_name,
                               'name'       => $term_name,
                               'definition' => $term_def,
                               'cv_name'    => $cv_name);
                               
      tripal_insert_cvterm($arr_terms_param);  
    }
  }
  
  //Create materialized view used in phenotypes/rawdata,
  //using Tripal: tripal_add_mview().
  $mv_name = 'rawpheno_rawdata_summary';
  $mv_module = 'tripal_core';
  $mv_comment = 'Materialized view used by rawpheno module to generate heat map in raw data page';

  //Create a summary of data in the following format
  //plant_id, Location, Rep, (summary of traits: trait id = trait value, ....) rows.
  $mv_sql = "SELECT t1.plant_id,
               ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t2.name = 'location' THEN t1.value ELSE '' END), '') AS location,
               ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t2.name = 'rep' THEN t1.value ELSE '' END), '') AS rep,
               ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t3.value <> '' THEN CONCAT(t3.type_id, ' = ', t3.value) ELSE null END), ':') AS measurement
             FROM pheno_plantprop AS t1 
               INNER JOIN chado.cvterm as t2 on t1.type_id = t2.cvterm_id
               INNER JOIN pheno_measurements as t3 on t1.plant_id = t3.plant_id
             WHERE t2.name in ('location', 'rep') 
             GROUP BY t1.plant_id  
             ORDER BY location, rep, t1.plant_id, measurement ASC";
  
  //Schema array.
  $mv_schema = array (
    'table' => 'rawpheno_rawdata_mview',
    'fields' => array (
    'plant_id' => array (
      'type' => 'varchar',
      'length' => 20),
    'location' => array (
      'type' => 'varchar',
      'length' => 20),
    'rep' => array (
      'type' => 'varchar',
      'length' => 5),
    'measurement' => array (
      'type' => 'text'),
    )
  );
  
  triapal_add_mview($mv_name, $mv_module, $mv_schema, $mv_sql, $mv_comment);
  
  //Insert scale measurement units.
  for($i = 1; $i <= 6; $i++) {
    $temp = db_insert('pheno_scale_member')
      ->fields(array('member_id' => $i, 
                     'scale_id' => $i, 
                     'code' => $i, 
                     'value' => $i))
      ->execute();
  }
}