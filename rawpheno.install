<?php

/**
 * @file
 * Contains all schema api and hook_install()/hook_uninstall()
 * implementations required by this module.
 */
 
/**
 * Implements hook_schema().
 */
function rawpheno_schema() {
  // PHENO PLANT
  // Since the plant can be described in many different ways,
  // we are using a prop-like table to describe the plant.
  // This allows for the flexibility needed to describe both
  // greenhouse and field pots.
  $schema['pheno_plant'] = array(
    'description' => t('Table for phenotype plant.'),
    'fields' => array(
      'plant_id' => array(
        'description' => t('A unique ID for each data collection.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'stock_id' => array(
        'description' => t('A unique ID for a stock name.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,),
      ),
  );

  // PHENO PLANT PROP
  // Type shoud include entry, plot, rep and location.
  $schema['pheno_plantprop'] = array(
    'description' => t('Table for phenotype plantprop.'),
    'fields' => array(
      'plantprop_id' => array(
        'description' => t('Primary key: A unique ID for each plantprop record.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'plant_id' => array(
        'description' => t('Holds plant ID number.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' =>  TRUE,
      ),
      'type_id' => array(
        'description' => t('Term ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'value' => array(
        'description' => t('The value of the trait measured.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ,)
    ,),
    'primary key' => array('plantprop_id'),
    'foreign keys' => array(
      'pheno_plant' => array(
        'table' => 'pheno_plant',
        'columns' => array('plant_id' => 'plant_id')),),
  );
  
  // PHENO SCALE MEMBER
  // Modified is the timestamp that it was last modified. 
  // This allows us to determine when values were updated.
  $schema['pheno_scale_member'] = array(
    'description' => t('Table for pheno scale member.'),
    'fields' => array(
      'member_id' => array(
        'description' => t('Primary key: A unique ID for each scale value.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'scale_id' => array(
        'description' => t('Scale ID number of a scale value.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'code' => array(
        'description' => t('Corresponding code for each scale ID.'),
        'type' => 'varchar',
        'length' => 255,
      ),
      'value' => array(
        'description' => t('Description of a scale value.'),
        'type' => 'text',
        'not null' => TRUE
      ,)
    ,),
    'primary key' => array('member_id'),
  );
    
  // PHENO MEASUREMENTS
  // The scale code is what is written in the spreadsheet, 
  // whereas the value is what it actually represents.
  $schema['pheno_measurements'] = array(
    'description' => t('Table for phenotype measurements'),
    'fields' => array(
      'measurement_id' => array(
        'description' => t('Primary key: A unique ID for each trait measured.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'plant_id' => array(
        'description' => t('Holds plant ID number.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type_id' => array(
        'description' => t('Term ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'unit_id' => array(
        'description' => t('Unit ID number of trait inserted.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => t('The value of the trait measured.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'cvalue_id' => array(
        'description' => t('Scale member code number when unit is scale.'),
        'type' => 'varchar',
        'length' => 10,
        'not null' => FALSE,
      ),
      'modified' => array(
        'description' => t('timestamp of the last modification.'),
        'type' => 'varchar',
        'length' => 30,
        'not null' => TRUE,
      )
    ,),
    'primary key' => array('measurement_id'),
    'foreign keys' => array(
      'pheno_plant' => array(
        'table' => 'pheno_plant',
        'columns' => array('plant_id' => 'plant_id')),),
  );
  //
    
  return $schema;
}

// Include function to manage column headers.
module_load_include('inc', 'rawpheno', 'include/rawpheno.function.measurements');

/**
 * Implements hook_install().
 */
function rawpheno_install() {
  // After custom tables are created, perform the following:
  // 1. Populate pheno_scale_member table.
  // 2. Insert cvterms property type, measurement unit and measurement types. 
  // 3. Create materialized view.
  
  // 1.
  // From standard phenotype data collection, scale is 1 - 5.
  $scale_value = array(1 => 'Vertical/upright', 
                       2 => 'Leaning',
                       3 => 'Most plants at 45 degrees angle',
                       4 => 'All plants 10-45 degrees from ground',
                       5 => 'Most plants flat/prostrate');
  
  // Insert scale values 1 - 5                    
  foreach($scale_value as $i => $value) {
    $tmp = db_insert('pheno_scale_member')
      ->fields(array('member_id' => $i, 
                     'scale_id' => $i, 
                     'code' => $i, 
                     'value' => $value))
      ->execute();
  }
  
  // 2.
  // Create cvterm entry for each traits.
  // Array to hold array of cvterms.
  $pp_terms = array();
  $mt_terms = array();
  
  // Get relevant trait set required, in this case all column headers
  // with the exception of Name.
  $expected_header = rawpheno_function_headers('expected');  
  // Index number of Plot, Entry, Rep and Location in traits array.
  // These id set is inserted into {chado.cvterm} as property types.
  $pp_id = array(0,1,3,4);
  // Array to hold column headers with first and second try.
  $arr_multiheaders = rawpheno_function_headers('multi-trial');
  
  // Read each header and create cvterm name and cvterm definition.
  foreach($expected_header as $i => $term) {
    
    // Skip column header if it is Name.
    if ($term == 'Name') { 
      continue;
    }
    
    // Determine type of terms and create an array of
    // cvterm name => cvterm definition values.
    if (in_array($i, $pp_id)) {
      // Term is Plot, Entry, Rep and Location.
      // Term is property type.
      $pp_terms[$term] = $term;      
    }
    else {
      // The rest of the terms.
      // Term is measurement type.
      $mt_terms[$term] = $term;
    }
  }
  
  // Measurement unit terms array.
  $mu_terms = array('date'  => 'Date',
                    'count' => 'Count',
                    'days'  => 'Days',
                    'cm'    => 'Centimeters',
                    'y/n/?' => 'Yes, No or ? - Not sure',
                    'scale' => 'Scale: 1-5',
                    'g'     => 'Grams (g)',
                    'text'  => 'Alphanumeric');
                    
  // Vocabulary terms array.
  $cv_vocabulary = array('phenotype_plant_property_types', 
                         'phenotype_measurement_types', 
                         'phenotype_measurement_units');
  
  // Insert 0. plant property, 1. measurment type and 2. measurement unit.
  $arr_terms = array($pp_terms, $mt_terms, $mu_terms);
  // Insert all terms by cvterm vocabulary.
  foreach($cv_vocabulary as $cv_i => $cv_name) {
    // Insert Controlled Vocubalary
    tripal_insert_cv($cv_name, str_replace('_', ' ', ucfirst($cv_name)));
    
    // Read each cvterm name and cvterm definition and insert to {chado.cvterm}.
    foreach($arr_terms[$cv_i] as $term_name => $term_def) {
      $arr_terms_param = array('id'         => 'tripal:'.$term_name,
                               'name'       => $term_name,
                               'definition' => $term_def,
                               'cv_name'    => $cv_name);
      
      // Insert cvterm.                         
      tripal_insert_cvterm($arr_terms_param);  
    }
  }

  // 3.
  // Create materialized view used in phenotypes/rawdata.
  // Using Tripal: tripal_add_mview().
  $mv_name = 'rawpheno_rawdata_summary';
  $mv_module = 'rawpheno';
  $mv_comment = 'Materialized view used by rawpheno module to generate summary of traits per location, rep and year.';

  // Create a summary of data in the following format:
  // plant_id, Location, Rep, trait id=trait value:trait id=trait value: ...., total trait count excluding planting_date
  // plant_id, Location, Rep, trait id=trait value:trait id=trait value: ...., total trait count excluding planting_date
  // ...
  // Summary of traits will be processed and counted to become the trait count,
  // excluding planting date. This summary will also provide the year and list of traits with data.
  $mv_sql = "SELECT DISTINCT t1.plant_id,
      ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t4.name = 'Location' THEN t2.value END), '') AS location,
      ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t4.name = 'Rep' THEN t2.value END), '') AS rep,
      ARRAY_TO_STRING(ARRAY_AGG(DISTINCT CASE WHEN t4.name = 'Planting Date (date)' THEN t3.value END), '') AS planting_date,
      COUNT(DISTINCT t3.type_id) - 1 AS count_measurement
    FROM pheno_plant AS t1 
      left JOIN pheno_plantprop AS t2 ON t1.plant_id = t2.plant_id
      left JOIN pheno_measurements AS t3 ON t1.plant_id = t3.plant_id
      left JOIN chado.cvterm AS t4 ON t4.cvterm_id IN(t2.type_id, t3.type_id)
    WHERE t3.value <> ''
    GROUP BY t1.plant_id
    ORDER BY t1.plant_id ASC";
  
  // Schema array.
  $mv_schema = array (
    'table' => 'rawpheno_rawdata_mview',
    'fields' => array (
    'plant_id' => array (
      'type' => 'varchar',
      'length' => 20),
    'location' => array (
      'type' => 'varchar',
      'length' => 255),
    'rep' => array (
      'type' => 'varchar',
      'length' => 5),
    'planting_date' => array (
      'type' => 'varchar',
      'length' => 12),
    'total_count' => array (
      'type' => 'varchar',
      'length' => 20),
    )
  );
  
  // Create materialized view.
  tripal_add_mview($mv_name, $mv_module, $mv_schema, $mv_sql, $mv_comment);
  
  // Set default colour scheme and page titles.
  variable_set('rawpheno_colour_scheme', '#304356');
  variable_set('rawpheno_rawdata_title', 'Phenotypic data available through KnowPulse');
  variable_set('rawpheno_download_title', 'Select locations and traits that you want to download');
  variable_set('rawpheno_instructions_title', 'Standard Phenotyping Procedure');
  variable_set('rawpheno_upload_title', 'Drag and Drop phenotypic data collection spreadsheet');
}

/**
 * Implements hook_uninstall().
 */
function rawpheno_uninstall() { 
  // Delete settings variables.
  if (variable_get('rawpheno_colour_scheme')) {
    // Holds new column headers.
    variable_del('rawpheno_colour_scheme');
  }
  
  // Rawdata page title.
  if (variable_get('rawpheno_rawdata_title')) {
    // Holds new column headers.
    variable_del('rawpheno_rawdata_title');
  }  
  
  // Download page title.
  if (variable_get('rawpheno_download_title')) {
    // Holds new column headers.
    variable_del('rawpheno_download_title');
  }
  
  // Instructions page title.
  if (variable_get('rawpheno_instructions_title')) {
    // Holds new column headers.
    variable_del('rawpheno_instructions_title');
  }
  
  // Upload page title.
  if (variable_get('rawpheno_upload_title')) {
    // Holds new column headers.
    variable_del('rawpheno_upload_title');
  }
  
  // Remove materialized view on uninstall.
  // Using tripal: tripal_delete_mview().
  // Get mview id of materilaized view created by hook_install().
  $sql = "SELECT mview_id FROM {tripal_mviews} WHERE mv_table = :mv_table LIMIT 1";
  $mview_id = db_query($sql, array(':mv_table' => 'rawpheno_rawdata_mview'))
              ->fetchField();
              
  if (isset($mview_id) && $mview_id > 0) {
    // Delete materialized view.
    tripal_delete_mview($mview_id);
  }
  
  // Remove cvterm records then controlled vocabulary.
  $cv_vocabulary = array('phenotype_plant_property_types', 
                         'phenotype_measurement_types', 
                         'phenotype_measurement_units');
  
  foreach($cv_vocabulary as $vocabulary) {
    // Delete all cvterm under a controlled vocabulary.
    $cv_id = tripal_get_cv(array('name' => $vocabulary));
    if (isset($cv_id->cv_id)) {
      // Delete all the cvterm under this vocabulary.
      $del = "DELETE FROM {chado.cvterm} WHERE cv_id = :cv_id";
      db_query($del, array(':cv_id' => $cv_id->cv_id));
      
      // Then delete controlled vocabulary terms.
      $del = "DELETE FROM {chado.cv} WHERE cv_id = :cv_id AND name = :cv";
      db_query($del, array(':cv_id' => $cv_id->cv_id, ':cv' => $vocabulary));
    }
  }
}