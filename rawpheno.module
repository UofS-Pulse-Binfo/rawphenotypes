<?php

/**
 * @file
 * The main functionality for this module.
 * Credits to: 
 *   http://jamesdavidson.io/blog/how-create-multi-step-form-drupal-7
 *   https://github.com/nuovo/spreadsheet-reader
 *   http://www.d3js.org
 */

/**
 * Implements hook_menu().
 */
function rawpheno_menu() {
  // The following menu items will default in Navigation menu block.
  // RAW DATA
  //  - DOWNLOAD DATA
  //  - INSTRUCTIONS
  //  - UPLOAD DATA
  
  // RAW DATA PAGE
  // A summary page of the raw data currently available.
  $items['phenotypes/raw'] = array(
    'title' => 'Raw Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_rawdata'),
    'access arguments' => array('access content'),
    'file' => 'rawdata/include/rawpheno_rawdata_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    // Menu callback which generates the summary data in JSON,
    // required by the heat map in rawdata page.
    $items['rawdata'] = array(
      'page callback' => 'rawpheno_rawdata_summary_json', 
      'access callback' => true, 
      'delivery callback' => 'drupal_json_output',
      'type' => MENU_CALLBACK,
    );
  
  // INSTRUCTIONS PAGE
  // A page containing standard phenotyping procedure and
  // providing data collection spreadsheet.
  $items['phenotypes/raw/instructions'] = array(
    'title' => 'Instructions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_instructions'),
    'access arguments' => array('access content'),
    'file' => 'instructions/include/rawpheno_instructions_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    // Menu callback which generates a list of headers in JSON,
    // used to autocomplete a search field and process search action
    // in instructions page.
    $items['autocomplete'] = array(
      'page callback' => 'rawpheno_instructions_autocomplete_search',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  
  // DOWNLOADS PAGE
  // A page providing export data options.
  $items['phenotypes/raw/download'] = array(
    'title' => 'Download Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_download'),
    'access arguments' => array('access content'),
    'file' => 'download/include/rawpheno_download_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    
  // DRAG AND DROP UPLOAD PAGE
  // A page for uploading and validating data collection spreadsheet.
  $items['phenotypes/raw/upload'] = array(
    'title' => 'Upload Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_element'),
    'access arguments' => array('access content'),
	  'file' => 'upload/include/rawpheno_upload_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

// Include function to manage column headers.
module_load_include('inc', 'rawpheno', 'include/rawpheno_function_measurements');

/**
 * Implements hook_libraries_info().
 */
function rawpheno_libraries_info() {
  // File option is empty since library files are included
  // individually using include_once().
  // files in: sites/all/libraries/spreadsheet-reader
  //   - SpreadsheetReader.php
  //   - SpreadsheetReaderXLSX.php
  //   - SpreadsheetReaderXLS.php
  //   - php-excel-reader/excel_reader2.php
  $libraries['spreadsheet_reader'] = array(
    'name' => 'NUOVO Spreadsheet - Reader XLS 2',
    'vendor url' => 'https://github.com/nuovo/spreadsheet-reader',
    'download url' => 'https://github.com/nuovo/spreadsheet-reader',
    'path' => 'sites/all/libraries/spreadsheet-reader/',
    'files' => array(),
  );
  
  return $libraries;
}

/**
 * Function callback; autocomplete search field.
 *
 * @see hook_menu()
 * 
 * @param $key
 *   A string containing the search keywords entered in the search field.
 *
 * @return 
 *   A JSON where each trait is both the key and the value. The key is what is 
 *   sent to JavaScript processing the search, while the value is what is suggested
 *   to user while typing in the seach field.
 */
function rawpheno_instructions_autocomplete_search($key = '') {
  // Array to hold list of traits.
  $arr_headers = array();
  // Array of column headers available in standard phenotyping instructions page.
  $arr_phenotyping_headers = rawpheno_function_headers('phenotyping');

  // Determine if keyword is provided.
  if (empty($key)) {
    // No keywords - Return all headers for JavaScript processing the search.
    $arr_headers = $arr_phenotyping_headers;
  }
  else {
    // With keywords - Select only the headers with keywords in it.
    // These headers will then be suggested to the user as they type keywords.
    foreach($arr_phenotyping_headers as $header) {
      if (stristr($header, $key)) {
        $arr_headers[$header] = $header;
      } 
    } 
  }
 
  drupal_json_output($list);
}

/**
 * Function callback; generate data for the heat map.
 *
 * @see hook_menu()
 *
 * @return
 *   A JSON with each member has the following objects:
 *   location, year, rep, # traits.
 */
function rawpheno_rawdata_summary_json() {
  // Get the cvterm_id of planting date trait.
  // The id will be used to determine if planting date is present in the list of headers. 
  // The final trait count will be deducted by 1 if planting date is present.
  $planting_date = tripal_get_cvterm(array('name' => 'planting_date'))
                   ->cvterm_id; 
  
  // Select all locations from materialized view.
  $sql = "SELECT DISTINCT location 
    FROM {chado.rawpheno_rawdata_mview} 
    ORDER BY location ASC";
  $locations = db_query($sql);
  
  if ($locations) {
    // Array to hold the JSON.
    $arr_json = array();
    // Array of planting years.
    $arr_year = array(2017, 2016, 2015);
    // Array of rep per year.
    $arr_rep = array(1, 2, 3);

    // Data set format per location.
    // location x - year 1 - rep 1 - # traits
    // location x - year 1 - rep 2 - # traits
    // location x - year 1 - rep 3 - # traits
    // location x - year 2 - rep 1 - # traits
    // location x - year 2 - rep 2 - # traits
    // location x - year 2 - rep 3 - # traits
    // location x - year 3 - rep 1 - # traits
    // location x - year 3 - rep 2 - # traits
    // location x - year 3 - rep 3 - # traits
    
    // Read each location available and construct data set.
    while($data = $locations->fetchAssoc()) {
      // In each location, read each planting year.
      foreach($arr_year as $year) {
        // In each year, read each rep.
        foreach($arr_rep as $rep) {
          // Each location in the materialized view
          $location = $data['location'];
          
          // Get traits summary based on location, year and rep,
          // if none is found, gap is filled in for that particular year
          // and rep to ensure that by the end of this iteration, each location
          // has a total of 9 rows of data (3 reps X 3 planting years) - shown above.
          $sql = "SELECT measurement 
            FROM {chado.rawpheno_rawdata_mview}
            WHERE measurement LIKE :year
              AND rep = :rep 
              AND location = :location 
            LIMIT 1";  
          $traits = db_query($sql, array(':year' => '%'.$year.'%', 
                                         ':rep' => $rep, 
                                         ':location' => $location))
                    ->fetchField();

          if (isset($traits) && !empty($traits)) {
            // This particular year and rep have data collected.
            // Compute the total traits measured excluding planting date.
            $trait_count = 0;
            // From the materialized view: measurement field contains data
            // in the following format:
            // trait1 id=trait1 value:trait2 id=trait2 value:...
            $trait_summary = explode(':', $traits);
            
            // Read each trait id=trait value combination.
            foreach($trait_summary as $entry) {
              list($type_id, $value) = explode('=', $entry);
              //Count all traits except planting date.
              if ($type_id != $planting_date) {
                $trait_count++;
              }
            } 
          }
          else {
            // This particular year and rep have no data collected.
            $trait_count = 0;
          }
          
          // Create a json entry with the following keys:
          // location, year, rep and trait.
          $arr_json[] = array('location' => $location,
                              'year' => $year,
                              'rep' => $rep,
                              'trait' => $trait_count);
        }
      }
    }
  }
  
  return $arr_json;
}