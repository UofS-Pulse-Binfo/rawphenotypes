<?php

/**
 * @file
 * The main functionality for this module.
 * Credits to: 
 *   http://jamesdavidson.io/blog/how-create-multi-step-form-drupal-7
 *   https://github.com/nuovo/spreadsheet-reader
 *   http://www.d3js.org
 */

// Include function to manage column headers.
module_load_include('inc', 'rawpheno', 'include/rawpheno.function.measurements');

// Include functions required in processing spreadsheet file.
module_load_include('inc', 'rawpheno', 'include/rawpheno.upload.excel');
module_load_include('inc', 'rawpheno', 'include/rawpheno.validation');
module_load_include('inc', 'rawpheno', 'include/rawpheno.upload.form');

/**
 * Implements hook_menu().
 */
function rawpheno_menu() {
  // The following menu items will default in Navigation menu block.
  // RAW DATA
  //  - DOWNLOAD DATA
  //  - INSTRUCTIONS
  //  - UPLOAD DATA
  
  // RAW DATA PAGE
  // A summary page of the raw data currently available.
  $items['phenotypes/raw'] = array(
    'title' => 'Raw Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_rawdata'),
    'access arguments' => array('access rawpheno'),
    'file' => 'include/rawpheno.rawdata.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    // Menu callback which generates the summary data in JSON,
    // required by the heat map in rawdata page.
    $items['rawdata'] = array(
      'page callback' => 'rawpheno_rawdata_summary_json', 
      'access callback' => true, 
      'delivery callback' => 'drupal_json_output',
      'type' => MENU_CALLBACK,
    );
  
  // INSTRUCTIONS PAGE
  // A page containing standard phenotyping procedure and
  // providing data collection spreadsheet.
  $items['phenotypes/raw/instructions'] = array(
    'title' => 'Instructions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_instructions'),
    'access arguments' => array('access rawpheno'),
    'file' => 'include/rawpheno.instructions.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
    // Menu callback which generates a list of headers in JSON,
    // used to autocomplete a search field and process search action
    // in instructions page.
    $items['autocomplete'] = array(
      'page callback' => 'rawpheno_instructions_autocomplete_search',
      'access arguments' => array('access rawpheno'),
      'type' => MENU_CALLBACK,
    );
  
  // DOWNLOADS PAGE
  // A page providing export data options.
  $items['phenotypes/raw/download'] = array(
    'title' => 'Download Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_download'),
    'access arguments' => array('access rawpheno'),
    'file' => 'include/rawpheno.download.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 6,
  );
    
  // DRAG AND DROP UPLOAD PAGE
  // A page for uploading and validating data collection spreadsheet.
  $items['phenotypes/raw/upload'] = array(
    'title' => 'Upload Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_upload_form_master'),
    'access arguments' => array('upload rawpheno'),
	  'file' => 'include/rawpheno.upload.form.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );
  
  // ADMININSTRATIVE PAGE OF THIS MODULE
  // A page for changing page colour and page title.
  $items['admin/config/user-interface/rawpheno_testadmin'] = array(
    'title' => 'Rawpheno Page Configurations',
    'description' => 'Apply a colour scheme and change page title.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_admin_interface'),
    'access arguments' => array('access administration pages'),
    'file' => 'include/rawpheno.admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function rawpheno_permission() {
  return array(
    'access rawpheno' => array(
      'title' => t('Access raw phenotypic data and summaries'),
    ),
    'upload rawpheno' => array(
      'title' => t('Upload raw phenotypic data'),
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function rawpheno_preprocess(&$variables) {
  // Path to module.
  $variables['path'] = drupal_get_path('module', 'rawpheno');
  // Phenotyping traits present in standard phenotyping procedure.
  $variables['traits'] = rawpheno_function_headers('phenotyping'); 
  
  // Colour scheme selected by the user from the admin/configuration.
  $colour = variable_get('rawpheno_colour_scheme');
  // Default to navy blue of knowpulse if no colour is provided.
  // This colour will fill background of header and top right button, and border of content area.
  $theme_colour = (empty($colour)) ? '#304356' : $colour;
  $variables['theme_colour'] = $theme_colour;
  
  // URL to each page.
  $arr_url = array(
    'rawpheno_rawdata' => url('phenotypes/raw'),
    'rawpheno_download' => url('phenotypes/raw/download'),  
    'rawpheno_instructions' => url('phenotypes/raw/instructions'),
    'rawpheno_upload' => url('phenotypes/raw/upload')
  );
  
  $variables['page_url'] = $arr_url; 
  
  // Cross-link page.
  // Rawdata and download page.
  // Instructions and upload page.
  $arr_assign_url = array(
    'rawpheno_rawdata' => $arr_url['rawpheno_download'],
    'rawpheno_download' => $arr_url['rawpheno_rawdata'],  
    'rawpheno_instructions' => $arr_url['rawpheno_upload'],
    'rawpheno_upload' => $arr_url['rawpheno_instructions']
  );
  
  $variables['rel_url'] = $arr_assign_url;
  
  // Page titles from admin configuration panel.
  $arr_headers = array();
  $arr_headers['rawpheno_rawdata'] = variable_get('rawpheno_rawdata_title');
  $arr_headers['rawpheno_download'] = variable_get('rawpheno_download_title');
  $arr_headers['rawpheno_instructions'] = variable_get('rawpheno_instructions_title');
  $arr_headers['rawpheno_upload'] = variable_get('rawpheno_upload_title');
  
  $variables['page_title'] = $arr_headers;
  
  // Stages in upload page.
  $variables['upload_stages'] = array('check' => 'Validate Spreadsheet', 
                                      'review' => 'Describe New Trait', 
                                      'save' => 'Save Spreadsheet');
}

/**
 * Implements hook_theme().
 *
 * Returns HTML for rawpheno pages.
 */
function rawpheno_theme($existing, $type, $theme, $path) {
  // Rawdata page.
  $items['rawpheno_rawdata'] = array(
    'render element' => 'form',
    'template' => 'rawpheno_pages',
    'path' => $path . '/theme',
  );
  
  // Instructions page.
  $items['rawpheno_instructions'] = array(
    'render element' => 'form',
    'template' => 'rawpheno_pages',
    'path' => $path . '/theme',
  );
  
  // Download page.
  $items['rawpheno_download'] = array(
    'render element' => 'form',
    'template' => 'rawpheno_pages',
    'path' => $path . '/theme',
  );

  // Upload page.
  $items['rawpheno_upload_form_master'] = array(
    'render element' => 'form',
    'template' => 'rawpheno_pages',
    'path' => $path . '/theme',
  );
    // Upload Errors.
    $items['rawpheno_upload_validation_report'] = array(
      'template' => 'rawpheno_upload_validation_report',
      'path' => $path . '/theme',
    );
    
  return $items;
}

/**
 * Implements hook_libraries_info().
 *
 * Define external libraries: Spreadsheet Reader and D3JS
 */
function rawpheno_libraries_info() {
  // Spreadsheet reader
  // File option is empty since library files are included
  // individually using include_once().
  // files in: sites/all/libraries/spreadsheet-reader
  //   - SpreadsheetReader.php
  //   - SpreadsheetReaderXLSX.php
  //   - SpreadsheetReaderXLS.php
  //   - php-excel-reader/excel_reader2.php
  $libraries['spreadsheet_reader'] = array(
    'name' => 'NUOVO Spreadsheet',
    'vendor url' => 'https://github.com/nuovo/spreadsheet-reader',
    'download url' => 'https://github.com/nuovo/spreadsheet-reader',
    'path' => 'sites/all/libraries/spreadsheet-reader/',
    'files' => array(),
  );
  
  // D3 JavaScript.
  $libraries['d3'] = array(
    'name' => 'D3 Data-Driven Documents',
    'version' => '3.4.14',
    'vendor url' => 'https://d3js.org/',
    'download url' => 'https://github.com/mbostock/d3/releases/download/v3.5.14/d3.zip',
    'library path' => 'sites/all/libraries/',
    'path' => 'sites/all/libraries/d3/',
    'files' => array(
      'js' => array('d3.js')
    )
  );
  
  return $libraries;
}

/**
 * Function callback: Autocomplete search field.
 *
 * @see hook_menu()
 * 
 * @param $key
 *   A string containing the search keywords entered in the search field.
 *
 * @return 
 *   A JSON where each trait is both the key and the value. The key is what is 
 *   sent to JavaScript processing the search, while the value is what is suggested
 *   to user while typing in the seach field.
 */
function rawpheno_instructions_autocomplete_search($key = '') {
  // Array to hold list of traits.
  $arr_headers = array();
  // Array of column headers available in standard phenotyping instructions page.
  $arr_phenotyping_headers = rawpheno_function_headers('phenotyping');

  // Determine if keyword is provided.
  if (empty($key)) {
    // No keywords - Return all headers for JavaScript processing the search.
    $arr_headers = array_values($arr_phenotyping_headers);
  }
  else {
    // With keywords - Select only the headers with keywords in it.
    // These headers will then be suggested to the user as they type keywords.
    foreach($arr_phenotyping_headers as $index => $header) {
      if (stristr($header, $key)) {
        $arr_headers[$header] = $header;
      } 
    } 
  }
 
  drupal_json_output($arr_headers);
}

/**
 * Function callback: Generate data for the heat map.
 *
 * @see hook_menu()
 *
 * @return
 *   A JSON and each member has the following objects:
 *   location, year, rep, # traits.
 */
function rawpheno_rawdata_summary_json() {
  // Minimum rep per year per location.
  $min_set = 3;
  // Select all location present in the materialized view.
  $sql_location = "SELECT DISTINCT location FROM chado.rawpheno_rawdata_mview
    ORDER BY location ASC";

  $result_location = db_query($sql_location);
  $count_location = $result_location->rowCount();
  
  if ($count_location > 0) {
    // Array to hold data.
    $data_json = array();
    // Array to hold planting years and rep.
    $arr_range['year'] = array();
    $arr_range['rep'] = array();
    
    // Define range of planting years and rep.
    for($i = 0; $i < 2; $i++) {
      $range = ($i == 0) ? 'year' : 'rep';
      // Query materialized view.
      $sql_range = sprintf("SELECT DISTINCT %s AS data_range FROM chado.rawpheno_rawdata_mview
        ORDER BY data_range ASC", ($range == 'year') ? 'SUBSTRING(planting_date, 1, 4)' : 'rep');
        
      $r = db_query($sql_range);
      $count_data = $r->rowCount();

      // Determine if total number of years is less than minimum number. 
      if ($count_data < $min_set) {
        // Year/rep count is less than minimum, fill the gap to make the
        // number always to minimum.
           
        // Initial/starting year/rep.
        $start_value = $r->fetchField();
        $arr_range[$range][] = $start_value;
        
        // Fill the missing years/rep and push to array.
        for($c = 1; $c < $min_set; $c++) {
          // Next year in the SQL result.
          $d = $r->fetchField();
          if (empty($d)) {
            // If it is empty, compute the next year.
            $start_value += 1;
            $arr_range[$range][] = $start_value;
          }
          else {
            // Year is present, store and set the start value to this year.
            $arr_range[$range][] = $d;
            $start_value = $d;
          }
        }
      }
      else {
        // There is more than the minimum year/rep returned by the query.
        // Store all values to years/rep array.
        foreach($r as $range_value) {
          $arr_range[$range][] = $range_value->data_range;
        }
      }
    }
    
    // Construct data set.
    // Read each location available and construct data set.
    while($data = $result_location->fetchAssoc()) {
      // In each location, read each planting year.
      foreach($arr_range['year'] as $year) {
        // In each year, read each rep.
        foreach($arr_range['rep'] as $rep) {
          // Each location in the materialized view
          $location = $data['location'];
          
          // Get the entry with the most traits for this particular location, year and rep.
          $sql = "SELECT total_count, all_traits
            FROM chado.rawpheno_rawdata_mview
            WHERE location = :location AND SUBSTRING(planting_date, 1, 4) = :year AND rep = :rep
            ORDER BY total_count DESC LIMIT 1";
          
          $traits = db_query($sql, array(':year' => $year, 
                                         ':rep' => $rep, 
                                         ':location' => $location))
            ->fetchObject();
             
          // Less one to exclude trait Planting Data (date).
          $trait_count = (isset($traits->total_count) && !empty($traits->total_count)) 
            ? ($traits->total_count - 1) : 0;
          
          // List of traits measured.
          $trait_list = (isset($traits->all_traits) && !empty($traits->all_traits)) 
            ? $traits->all_traits : 0; 
            
          // Create a json entry with the following keys:
          // location, year, rep and trait.
          $arr_json[] = array('location' => $location,
                              'year' => $year,
                              'rep' => $rep,
                              'trait' => $trait_count,
                              'type_id' => $trait_list);
        }
      }
    }

    return $arr_json;
  } 
  else {
    // No data.
    return 0;
  }
}
