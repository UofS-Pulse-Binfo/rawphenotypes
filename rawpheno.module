<?php

/**
 * @file
 * The main functionality for this module.
 * Credits to: 
 *   http://jamesdavidson.io/blog/how-create-multi-step-form-drupal-7
 *   https://github.com/nuovo/spreadsheet-reader
 *   http://www.d3js.org
 */

/**
 * Implements hook_menu()
 * 
 * @return type
 */
function rawpheno_menu() {
  $items = array();
  
  //Default in Navigation menu block
  //RAW DATA
  // -DOWNLOAD DATA
  // -INSTRUCTIONS
  // -UPLOAD DATA
  
  //RAW DATA PAGE
  $items['phenotypes/raw'] = array(
    'title' => 'Raw Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_rawdata'),
    'access arguments' => array('access content'),
    'file' => 'rawdata/include/rawpheno_rawdata_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    //Menu callback which generates the summary data in JSON,
    //required by the heatmap/chart in rawdata page.
    $items['rawdata'] = array(
      'access callback' => true, 
      'page callback' => 'rawpheno_rawdata_summary_json', 
      'delivery callback' => 'drupal_json_output',
      'type' => MENU_CALLBACK,
    );
  
  //INSTRUCTIONS PAGE
  $items['phenotypes/raw/instructions'] = array(
    'title' => 'Instructions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_instructions'),
    'access arguments' => array('access content'),
    'file' => 'instructions/include/rawpheno_instructions_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    //Menu callback which generates a key => value data in JSON,
    //used to autocomplete a search field in instructions page.
    $items['autocomplete'] = array(
      'page callback' => 'rawpheno_instructions_autocomplete_search',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  
  //DOWNLOADS PAGE
  $items['phenotypes/raw/download'] = array(
    'title' => 'Download Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_download'),
    'access arguments' => array('access content'),
    'file' => 'download/include/rawpheno_download_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
    
  //DRAG AND DROP UPLOAD PAGE
  $items['phenotypes/raw/upload'] = array(
    'title' => 'Upload Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rawpheno_element'),
    'access arguments' => array('access content'),
	  'file' => 'upload/include/rawpheno_upload_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implements hook_libraries_info() for SpreadsheetReader.
 *
 * @return array
 */
function rawpheno_libraries_info() {
  //Files option is empty since library files are included
  //individually using include_once().
  //files in: sites/all/libraries/spreadsheet-reader
  //  - SpreadsheetReader.php
  //  - SpreadsheetReaderXLSX.php
  //  - SpreadsheetReaderXLS.php
  //  - php-excel-reader/excel_reader2.php
  $libraries['spreadsheet_reader'] = array(
    'name' => 'NUOVO Spreadsheet - Reader XLS 2',
    'vendor url' => 'https://github.com/nuovo/spreadsheet-reader',
    'download url' => 'https://github.com/nuovo/spreadsheet-reader',
    'path' => 'sites/all/libraries/spreadsheet-reader/',
    'files' => array(),
  );
  
  return $libraries;
}

/**
 * Callback function to autocomplete keyword/trait
 * in phenotypes/instructions page.
 * See hook_menu() implementation above. 
 *
 * @param string $key
 * @return object
 */
function rawpheno_instructions_autocomplete_search($key) {
  //$key contains search keywords to match in the following
  //list of traits.
  $list = array();
  
  //List of traits available in standard phenotyping instruction.
  //Suggest these traits to user as they type in letters in search field.
  $traits = array('Planting Date (date)',
                  'Days to Emergence (days)',
                  '# Emerged Plants (count)',
                  'Days Till 10% of Plants Have Elongated Tendril (days)',
                  'Days Till 10% of Plants Have One Open Flower (R1; days)',
                  'Days Till 10% of Plants Have Pods (R3; days)',
                  'Days Till 10% of Plants Have Swollen Seeds in Pods (R5; days)',
                  'Days Till 10% of Plants Have 1/2 Their Pods Mature (R7; days)',
                  'Days Till Harvest (days)',
                  'Diseases Present (y/n/?)',
                  'Number of Nodes on Primary Stem at R1 (count)',
                  'R7 Trait: Lowest Pod Height (cm)',
                  'R7 Traits: Canopy Height (cm)',
                  'R7 Traits: Canopy Width (cm)',
                  'R7 Traits: Plant Length (cm)',
                  'Lodging (Scale: 1-5)',
                  'Straw Biomass (g)',
                  'Total Seed Mass (g)',
                  'Total Number of Seeds (count)',
                  '100 Seed Mass (g)',
                  'Subset Traits: # Peduncles (count)',
                  'Subset Traits: # Pods (count)',
                  'Subset Traits: # Seeds (count)');
  
  //Create list key => value to suggest to user based on $key.
  foreach($traits as $val) {
    if (stristr($val, $key)) {
      $list[$val] = $val;
    } 
  }
  
  //Return a json list of traits that has $key.
  drupal_json_output($list);
}

/**
 * Callback function to generate data for heat map
 * in phenotypes/rawdata page
 *
 * @return object
 */
function rawpheno_rawdata_summary_json() {
  //Get the cvterm_id/type_id of planting date trait.
  //The id will be used to determine if planting date is present
  //in the list of measurements. The final trait count will be
  //deducted by 1 if planting date is present.
  $planting_date = tripal_get_cvterm(array('name' => 'planting_date')); 
  
  //Select all locations from materialized view and construct data set.
  $data = db_query("SELECT DISTINCT location 
                    FROM {chado.rawpheno_rawdata_mview} 
                    ORDER BY location ASC");
  
  if ($data) {
    //Data arrays
    $json = array();
    //Given years to search.
    $arr_year = array(2017, 2016, 2015);
    //Reps per year.
    $arr_rep   = array(1, 2, 3);

    //Construct data set per location in the following format,
    //based on materialized views which is a summary of 
    //location,year,rep and measurements.
    //location x - year 1 - rep 1 - # traits
    //location x - year 1 - rep 2 - # traits
    //location x - year 1 - rep 3 - # traits
    //location x - year 2 - rep 1 - # traits
    //location x - year 2 - rep 2 - # traits
    //location x - year 2 - rep 3 - # traits
    //location x - year 3 - rep 1 - # traits
    //location x - year 3 - rep 2 - # traits
    //location x - year 3 - rep 3 - # traits
    
    while($r = $data->fetchAssoc()) {
      $d_location = $r['location'];
      
      //loop each year and each rep
      foreach($arr_year as $y) {
        foreach($arr_rep as $r) {
        ///  
          //Seach traits based on location, year and rep,
          //if none is found, gap is filled in for that particular year
          //to ensure by the end of this iteration, a location has 9 rows
          //of data (3 rep X 3 planting years).
          $sql = "SELECT measurement FROM {chado.rawpheno_rawdata_mview}
                  WHERE measurement LIKE '%$y%'
                  AND rep = '$r' AND location = '$d_location' LIMIT 1";
          $traits = db_query($sql)->fetchField();
         
          if (isset($traits) && !empty($traits)) {
            //Determine if planting date is present 
            //and compute actual number of traits.
            $measurements = explode(':', $traits);
            $d_count = 0;
            foreach($measurements as $m) {
              list($type_id, $value) = explode(' = ', $m);
              if ($type_id != $planting_date->cvterm_id) {
                //Count all traits - excluding planting date
                $d_count++;
              }
            } 
          }
          else {
            //No record - reconstruct location's missing year and rep.
            $d_count = 0;
          }
          
          //Create a json entry with the following keys
          //location, year, rep and trait
          //[{"location":"X","year":"YYYY","rep":"[1-3]","trait":"[0-9]"}]
          $json[] = array('location' => $d_location,
                          'year' => $y,
                          'rep' => $r,
                          'trait' => $d_count);
        ///  
        }
      }
    }
  }
  else {
    //No data to process.
    $json = 'no data';
  } 
  
  //Send data to D3 and generate heatmap located in:
  //http://knowpulse.usask.ca/dev/.../rawdata
  return $json;
}